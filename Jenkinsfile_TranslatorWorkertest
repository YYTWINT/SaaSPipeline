def gv
def emailHandle
def LinuxbuildDir
def LinuxstageDir
def WindowbuildDir
def WindowstageDir
def HCFlag
def BUILD_PROCESS_FLAG
def BUILD_AGENT='SAAS_di2inpun0050lv0_yytwint_build'
def WIN_BUILD_AGENT='SAAS_di2inpun0112wv0_yytwint_build_wntx64'
def TEST_AGENT='SAAS_di2inpun0212lv0_yytwint_test'
def STAGE_AGENT='SAAS_di2inpun0212lv0_yytwint_test'

pipeline {
    agent any
	parameters {
		choice(name: 'NXRelease', choices: ['nx2306.latest', 'nx2212.latest', 'nx2206.latest'], description: 'Use the latest IP from NXVersion release to create the build.') 
		string(name: 'LinuxUnitPath', defaultValue: '/apps/JenkinsBase/units/Dev', description : 'Path where Linux build unit for the run is to be created.')
		string(name: 'WindowUnitPath', defaultValue: 'C:/workdir/jenkins/units/Dev', description : 'Path where window build unit for the run is to be created.')
		string(name: 'LinuxStagePath', defaultValue: '/apps/JenkinsBase/stage/Dev', description : 'Path where translator worker kits are to be staged.')
		string(name: 'WindowStagePath', defaultValue: 'C:/workdir/jenkins/stage/Dev', description : 'Path where translator worker kits are to be staged.')
		booleanParam(name: 'HC', defaultValue: false, description : 'Enable horizontal collaboration change package ')
		string(name: 'CPNumber', defaultValue: '0', description : 'CP number on top of NXRelease against which build and test steps to be executed.')		
		booleanParam(name: 'Deploy', defaultValue: false, description : 'Deploy staging directory contents to customer setup')
	}
    stages {
		stage ('init'){
			steps {
				script{
					gv = load "TranslatorWorkerScriptstest.groovy"
					emailHandle = load "email.groovy"
					LinuxbuildDir="${params.LinuxUnitPath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					LinuxstageDir="${params.LinuxStagePath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					WindowbuildDir="${params.WindowUnitPath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					WindowstageDir="${params.WindowStagePath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					HCFlag="${params.HC}"
				}
			}
		}
		
		stage('Linux CreateUnit') {
            agent { label "${BUILD_AGENT}" }
            steps {
				script{
					def CP="${params.CPNumber}"
					if (("${HCFlag}"=="false") || (("${HCFlag}"=="true") && ("${CP}"!="0"))){
						//gv.createLinuxUnit(LinuxbuildDir) 
						BUILD_PROCESS_FLAG=true
					}
					else {
						error "you have selected HC option but CP number is not specified correctly so skipping Group build and testing!"
						BUILD_PROCESS_FLAG=false						
					}
				}					
            }
        }
		stage('Window CreateUnit') {
            agent { label "${WIN_BUILD_AGENT}" }
            steps {
				script{
					def CP="${params.CPNumber}"
					if (("${HCFlag}"=="false") || (("${HCFlag}"=="true") && ("${CP}"!="0"))){
						gv.createWindowUnit(WindowbuildDir) 
						BUILD_PROCESS_FLAG=true
					}
					else {
						error "you have selected HC option but CP number is not specified correctly so skipping Group build and testing!"
						BUILD_PROCESS_FLAG=false						
					}
				}					
            }
        }
        stage('Linux Build') {
            agent { label "${BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
						echo 'linux build'
						//gv.buildLinuxUnit(LinuxbuildDir)
				}					
            }
        }
		stage('Windows Build') {
            agent { label "${WIN_BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
						gv.buildWinUnit(WindowbuildDir)
				}					
            }
        }		
		stage('Linux Test') {
            agent { label "${TEST_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "testing stage"
					//gv.TestLinuxUnit(LinuxbuildDir)
				}					
            }
        }
		stage('Window Test') {
            agent { label "${WIN_BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					  echo "testing stage"
					  //gv.TestWinUnit(WindowbuildDir)
				}					
            }
        }		
		stage('WinStageAndCopy') {
            agent { label "${WIN_BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "Window stagging"
					gv.WinStageAndCopy(WindowbuildDir,WindowstageDir)
					
				}					
            }
        }
		stage('LinuxStageAndCopy') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "linux stagging"
					//gv.LinuxStageAndCopy(LinuxbuildDir,LinuxstageDir)
					
				}					
            }
        }
		stage('DeployProcess') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.DeployProcess(LinuxbuildDir)
					
				}					
            }
        }
		stage('Purge Linux Unit') {
			agent { label "${BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "linux purge unit"
					//gv.LinuxPurge("${params.LinuxUnitPath}")
					
				}					
            }
		}
		stage('Purge Linux Stage') {
			agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "linux purge group"
					gv.LinuxPurge("${params.LinuxStagePath}")
					
				}					
            }
		}
		stage('Purge window Unit') {
			agent { label "${WIN_BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "Window purge unit"
					//gv.WinPurge("${params.WindowUnitPath}")
					
				}					
            }
		}
		stage('Purge window Stage') {
			agent { label "${WIN_BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					echo "Window purge group"
					gv.WinPurge("${params.WindowStagePath}")
					
				}					
            }
		}
    }

    post {
		
        success {
            echo 'All tasks completed successfully.'
        }
		failure {
			echo 'One or more stages have failed.'
		}
		always {
			script{
				echo 'echo statement.'	
				//emailHandle.sendSuccessEmail(LinuxbuildDir,LinuxstageDir)
			}					
		}
		
    }
}
